<?phpclass Location extends BaseModel {    public $id;    // int primary key auto_increment,    public $userid;    public $restaurantid;    public $address;    public $street;    public $city;    public $state;    public $postcode;    public $lat;    public $longt;    public function validate() {        reset($this->errors);        //   Validator::validate($this, "from_time", "Required", Validator::$VALIDATION_NONE);        Validator::validate($this, "address", "Required", Validator::$VALIDATION_NONE);        Validator::validate($this, "street", "Required", Validator::$VALIDATION_NONE);        Validator::validate($this, "city", "Required", Validator::$VALIDATION_NONE);        Validator::validate($this, "state", "Required", Validator::$VALIDATION_NONE);        Validator::validate($this, "postcode", "Required", Validator::$VALIDATION_NONE);       // Validator::validate($this, "lat", "Required", Validator::$VALIDATION_NONE);       // Validator::validate($this, "longt", "Required", Validator::$VALIDATION_NONE);        return!$this->haserrors();    }    public static function Create(Location $model) {        $mysqli = Config::OpenDBConnection();        $query = "insert into ws_locations values (?,?,?,?,?,?,?,?,?,?)";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_param("iiisssssdd", $model->id, $model->userid, $model->restaurantid,$model->address,$model->street,$model->city,$model->state,$model->postcode, $model->lat, $model->longt);        $stmt->execute();        $id = $mysqli->insert_id;        $mysqli->close();        return $id;    }    public static function Update(Location $model) {        $mysqli = Config::OpenDBConnection();        $query = "update ws_locations  set address=?,street=?,city=?,state=?,postcode=?,lat=?,longt=? where id=?";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_param("sssssssi", $model->address,$model->street,$model->city,$model->state,$model->postcode,$model->lat, $model->longt, $model->id);        $stmt->execute();        $id = $mysqli->insert_id;        $mysqli->close();        return $id;    }    public static function Delete($id) {        $mysqli = Config::OpenDBConnection();        $query = "delete from ws_locations where id=?";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_param("i", $id);        $stmt->execute();        $mysqli->close();    }	public static function DeleteBy($res, $id) {        $mysqli = Config::OpenDBConnection();        $query = "delete from ws_locations where restaurantid=? and id=?";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_param("ii", $res, $id);        $stmt->execute();        $mysqli->close();    }	public static function DeletebyRestid($restid) {        $mysqli = Config::OpenDBConnection();        $query = "delete from ws_locations where restaurantid=?";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_param("i", $restid);        $stmt->execute();        $mysqli->close();    }    public static function ReadAllCategory(&$pagecount, $pageno=1, $pagesize=10) {        $limit = BaseModel::Limit($pageno, $pagesize);        $model = new Location();        $mysqli = Config::OpenDBConnection();        $query = "select * from ws_locations{$limit}";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_result($model->id, $model->userid, $model->restaurantid,$model->address,$model->street,$model->city,$model->state,$model->postcode, $model->lat, $model->longt);        $stmt->execute();        $list = array();        while ($stmt->fetch()) {            $obj = new Location();            Utils::COPY_ROW_TO_OBJ($obj, $model);            $list[$obj->id] = $obj;        }        $pagecount = dbmodel::PageCount("ws_locations");//        $pagecount = dbmodel::PageCount("useracc", "id in (select useraccid from exam where testpaperid={$testpaperid})", $pagesize);        $mysqli->close();        return $list;    }    public static function SearchByProduct(&$pagecount, $product, $pageno=1, $pagesize=10) {        $limit = BaseModel::Limit($pageno, $pagesize);        $model = new Location();        $mysqli = Config::OpenDBConnection();        $query = "select * from ws_locations where product='{$product}' {$limit}";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_result($model->id, $model->userid, $model->restaurantid,$model->address,$model->street,$model->city,$model->state,$model->postcode, $model->lat, $model->longt);        $stmt->execute();        $list = array();        while ($stmt->fetch()) {            $obj = new Location();            Utils::COPY_ROW_TO_OBJ($obj, $model);            $list[$obj->id] = $obj;        }        $pagecount = dbmodel::PageCount("ws_locations");//        $pagecount = dbmodel::PageCount("useracc", "id in (select useraccid from exam where testpaperid={$testpaperid})", $pagesize);        $mysqli->close();        return $list;    }    public static function ReadAll() {        $model = new Location();        $mysqli = Config::OpenDBConnection();        $query = "select * from ws_locations order by id";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_result($model->id, $model->userid, $model->restaurantid,$model->address,$model->street,$model->city,$model->state,$model->postcode, $model->lat, $model->longt);        $stmt->execute();        $list = array();        while ($stmt->fetch()) {            $obj = new Location();            Utils::COPY_ROW_TO_OBJ($obj, $model);            $list[$obj->id] = $obj;        }        $mysqli->close();        return $list;    }    public static function ReadSingle($id) {        $model = new Location();        $mysqli = Config::OpenDBConnection();        $query = "select * from ws_locations where id =?";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_param("i", $id);        $stmt->bind_result($model->id, $model->userid, $model->restaurantid,$model->address,$model->street,$model->city,$model->state,$model->postcode, $model->lat, $model->longt);        $stmt->execute();        if ($stmt->fetch()) {            $mysqli->close();            return $model;        } else {            $mysqli->close();            return null;        }    }	public static function ReadSinglebyrest($id) {        $model = new Location();        $mysqli = Config::OpenDBConnection();        $query = "select * from ws_locations where restaurantid =?";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_param("i", $id);        $stmt->bind_result($model->id, $model->userid, $model->restaurantid,$model->address,$model->street,$model->city,$model->state,$model->postcode, $model->lat, $model->longt);        $stmt->execute();        if ($stmt->fetch()) {            $mysqli->close();            return $model;        } else {            $mysqli->close();            return null;        }    }    public static function SearchBymenuitem(&$pagecount, $restaurantid, $pageno=1, $pagesize=10) {        $limit = BaseModel::Limit($pageno, $pagesize);        $model = new Location();        $mysqli = Config::OpenDBConnection();        $query = "select * from ws_locations where restaurantid={$restaurantid} {$limit}";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_result($model->id, $model->userid, $model->restaurantid,$model->address,$model->street,$model->city,$model->state,$model->postcode, $model->lat, $model->longt);        $stmt->execute();        $list = array();        while ($stmt->fetch()) {            $obj = new Location();            Utils::COPY_ROW_TO_OBJ($obj, $model);            $list[$obj->id] = $obj;        }        $pagecount = dbmodel::PageCount("ws_locations");//    $pagecount = dbmodel::PageCount("useracc", "id in (select useraccid from exam where testpaperid={$testpaperid})", $pagesize);        $mysqli->close();        return $list;    }    public static function ReadAllByMenuid($menuid) {        $model = new Location();        $mysqli = Config::OpenDBConnection();        $query = "select * from ws_locations where restaurantid=?";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_param("i", $menuid);        $stmt->bind_result($model->id, $model->userid, $model->restaurantid,$model->address,$model->street,$model->city,$model->state,$model->postcode, $model->lat, $model->longt);        $stmt->execute();        $list = array();        while ($stmt->fetch()) {            $obj = new Location();            Utils::COPY_ROW_TO_OBJ($obj, $model);            $list[$obj->id] = $obj;        }        $mysqli->close();        return $list;    }	 public static function ReadAllByuserid($userid) {        $model = new Location();        $mysqli = Config::OpenDBConnection();         $query = "select * from ws_locations where userid={$userid}";        $stmt = Config::CreateStatement($mysqli, $query);        //$stmt->bind_param("i", $userid);        $stmt->bind_result($model->id, $model->userid, $model->restaurantid,$model->address,$model->street,$model->city,$model->state,$model->postcode, $model->lat, $model->longt);        $stmt->execute();        $list = array();        while ($stmt->fetch()) {            $obj = new Location();            Utils::COPY_ROW_TO_OBJ($obj, $model);            $list[$obj->id] = $obj;        }        $mysqli->close();        return $list;    }    public static function ReadAllBylatandlong($lat,$longt,$userid) {        $model = new Location();        $mysqli = Config::OpenDBConnection();		        //$query = "select restaurantid from ws_locations where lat=? and longt=? group by id";		$query="SELECT id,userid,lat,longt,address,street,city,state,postcode,restaurantid, ( 6371 * acos( cos( radians({$lat}) ) * cos( radians( lat ) ) * cos( radians( longt ) - radians({$longt}) ) + sin( radians({$lat}) ) * sin( radians( lat ) ) ) ) AS distance FROM ws_locations where userid={$userid} group by id HAVING distance <= 50  ORDER BY distance";        $stmt = Config::CreateStatement($mysqli, $query);       //$stmt->bind_param("issi",$userid,$lat,$longt,$model->distance);       $stmt->bind_result($model->id,$model->userid,$model->lat,$model->longt,$model->address,$model->street,$model->city,$model->state,$model->postcode,$model->restaurantid,$model->distance);        $stmt->execute();        $list = array();        while ($stmt->fetch()) {            $obj = new Location();            Utils::COPY_ROW_TO_OBJ($obj, $model);            $list[] = $obj;						        }        $mysqli->close();		//print_r($list);        return $list;    }	public static function ReadAllRestBylatandlong($lat,$longt) {        $model = new Location();        $mysqli = Config::OpenDBConnection();		        //$query = "select restaurantid from ws_locations where lat=? and longt=? group by id";		$query="SELECT id,userid,lat,longt,address,street,city,state,postcode,restaurantid, ( 6371 * acos( cos( radians({$lat}) ) * cos( radians( lat ) ) * cos( radians( longt ) - radians({$longt}) ) + sin( radians({$lat}) ) * sin( radians( lat ) ) ) ) AS distance FROM ws_locations group by id HAVING distance <= 50  ORDER BY distance";        $stmt = Config::CreateStatement($mysqli, $query);       //$stmt->bind_param("issi",$userid,$lat,$longt,$model->distance);       $stmt->bind_result($model->id,$model->userid,$model->lat,$model->longt,$model->address,$model->street,$model->city,$model->state,$model->postcode,$model->restaurantid,$model->distance);        $stmt->execute();        $list = array();        while ($stmt->fetch()) {            $obj = new Location();            Utils::COPY_ROW_TO_OBJ($obj, $model);            $list[] = $obj;						        }        $mysqli->close();		//print_r($list);        return $list;    }     public static function ReadAlllatandlongbyid($id) {        $model = new Location();        $mysqli = Config::OpenDBConnection();        $query = "select * from ws_locations where restaurantid=? group by restaurantid";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_param("i", $id);         $stmt->bind_result($model->id, $model->userid, $model->restaurantid,$model->address,$model->street,$model->city,$model->state,$model->postcode, $model->lat, $model->longt);        $stmt->execute();        $list = array();        while ($stmt->fetch()) {            $obj = new Location();            Utils::COPY_ROW_TO_OBJ($obj, $model);            $list[$obj->id] = $obj;        }        $mysqli->close();        return $list;    }	public static function SearchByZipcode(&$pagecount, $zipcode,$userid ,$pageno=1, $pagesize=10) {        $limit = BaseModel::Limit($pageno, $pagesize);        $model = new Location();        $mysqli = Config::OpenDBConnection();        $query = "select * from ws_locations where postcode={$zipcode} and userid={$userid}";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_result($model->id,$model->userid ,$model->restaurantid,$model->address,$model->street,$model->city,$model->state,$model->postcode,$model->lat, $model->longt);        $stmt->execute();        $list = array();        while ($stmt->fetch()) {            $obj = new Location();            Utils::COPY_ROW_TO_OBJ($obj, $model);            $list[$obj->id] = $obj;        }        $pagecount = dbmodel::PageCount("ws_locations");//    $pagecount = dbmodel::PageCount("useracc", "id in (select useraccid from exam where testpaperid={$testpaperid})", $pagesize);        $mysqli->close();        return $list;    }	public static function ReadSinglebyrestid($restid) {        $model = new Location();        $mysqli = Config::OpenDBConnection();        $query = "select * from ws_locations where restaurantid =?";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_param("i", $restid);        $stmt->bind_result($model->id, $model->userid, $model->restaurantid,$model->address,$model->street,$model->city,$model->state,$model->postcode, $model->lat, $model->longt);        $stmt->execute();        if ($stmt->fetch()) {            $mysqli->close();            return $model;        } else {            $mysqli->close();            return null;        }    }	public static function SearchBycity(&$pagecount, $city,$userid ,$pageno=1, $pagesize=10) {        $limit = BaseModel::Limit($pageno, $pagesize);        $model = new Location();        $mysqli = Config::OpenDBConnection();        $query = "select * from ws_locations where city=? and userid=?";        $stmt = Config::CreateStatement($mysqli, $query);		 $stmt->bind_param("si", $city,$userid);         $stmt->bind_result($model->id, $model->userid, $model->restaurantid,$model->address,$model->street,$model->city,$model->state,$model->postcode, $model->lat, $model->longt);        $stmt->execute();        $list = array();        while ($stmt->fetch()) {            $obj = new Location();            Utils::COPY_ROW_TO_OBJ($obj, $model);            $list[$obj->id] = $obj;        }        $pagecount = dbmodel::PageCount("ws_locations");//    $pagecount = dbmodel::PageCount("useracc", "id in (select useraccid from exam where testpaperid={$testpaperid})", $pagesize);        $mysqli->close();        return $list;    }	public static function SearchByrestid(&$pagecount, $restid,$userid ,$pageno=1, $pagesize=10) {        $limit = BaseModel::Limit($pageno, $pagesize);        $model = new Location();        $mysqli = Config::OpenDBConnection();        $query = "select * from ws_locations where restaurantid={$restid} and userid={$userid} {$limit}";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_result($model->id,$model->userid ,$model->restaurantid,$model->address,$model->street,$model->city,$model->state,$model->postcode,$model->lat, $model->longt);        $stmt->execute();        $list = array();        while ($stmt->fetch()) {            $obj = new Location();            Utils::COPY_ROW_TO_OBJ($obj, $model);            $list[$obj->id] = $obj;        }        $pagecount = dbmodel::PageCount("ws_locations");//    $pagecount = dbmodel::PageCount("useracc", "id in (select useraccid from exam where testpaperid={$testpaperid})", $pagesize);        $mysqli->close();        return $list;    }		public static function SearchByuserid(&$pagecount, $userid ,$pageno=1, $pagesize=10) {        $limit = BaseModel::Limit($pageno, $pagesize);        $model = new Location();        $mysqli = Config::OpenDBConnection();        $query = "select * from ws_locations where userid={$userid} {$limit}";        $stmt = Config::CreateStatement($mysqli, $query);        $stmt->bind_result($model->id,$model->userid ,$model->restaurantid,$model->address,$model->street,$model->city,$model->state,$model->postcode,$model->lat, $model->longt);        $stmt->execute();        $list = array();        while ($stmt->fetch()) {            $obj = new Location();            Utils::COPY_ROW_TO_OBJ($obj, $model);            $list[$obj->id] = $obj;        }        $pagecount = dbmodel::PageCount("ws_locations");//    $pagecount = dbmodel::PageCount("useracc", "id in (select useraccid from exam where testpaperid={$testpaperid})", $pagesize);        $mysqli->close();        return $list;    }}?>